 $(document) ready()和window onload在表单上看都是页面加载时我们就去执行一个函数或动作，但是在具体的细节上$(document) ready()和window onload还是有区别的，下面我来介绍介绍。
 最基本的区别

1.执行时间

window.onload必须等到页面内包括图片的所有元素加载完毕后才能执行。 
$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。

2.编写个数不同

window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个 
$(document).ready()可以同时编写多个，并且都可以得到执行

3.简化写法

window.onload没有简化写法 
$(document).ready(function(){})可以简写成$(function(){});


以浏览器装载文档为例，在页面加载完毕后，浏览器会通过JavaScript为DOM元素添加事件。在常规的JavaScript代码中，通常使用window.onload方法，而在jQuery中，使用的是$(document).ready()方法。

$(document).ready()方法和window.onload方法有相似的功能，但是在执行时机方面是有区别的。window.onload方法是在网页中所有的元素（包括元素的关联文件）完全加载到浏览器后才执行，即JavaScript此时才可以访问网页中的任何元素。而通过jQuery中的$(document).ready()方法注册的事件处理程序，可以在DOM完全就绪时就可以被调用。此时，网页的所有元素对jQuery而言都是可以访问的，但是，这并不意味着这些元素关联的文件都已经下载完毕。

举一个例子，有一个大型的图库网站，为网页中所有图片添加某些行为，例如单击图片后让它隐藏或显示。如果使用window.onload方法来处理，那么用户必须等到每一幅图片都加载完毕后，才可以进行操作。如果使用jQuery中的$(document).ready()方法来进行设置，只要DOM就绪时就可以操作了，不需要等待所有图片下载完毕。很显然，把网页解析为DOM树的速度比把网页中的所有关联文件加载完毕的速度快很多。

另外需要注意一点，由于在$(document).ready()方法内注册的事件，只要DOM就绪就会被执行，因此可能此时元素的关联文件未下载完。例如与图片有关的HTML下载完毕，并且已经解析为DOM树了，但很有可能图片还未加载完毕，所以例如图片的高度和宽度这样的属性此时不一定有效。要解决这个问题，可以使用JQuery中另一个关于页面加载的方法——load()方法。load()方法会在元素的onload事件中绑定一个处理函数。如果处理函数绑定给window对象，则会在所有内容（包括窗口、框架、对象和图像等）加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。jQuery代码如下：

$(window).load(function () {
    //编写代码
})

等价与javaScript中的以下代码：

window.onload = function () {
    //编写代码
}

假设网页中有两个函数，JavaScript代码如下：

function one() {
    alert("one");
}

function two() {
    alert("two");
}

当网页加载完毕后，通过Javascript代码来分别调用one函数和two函数：

window.onload = one;
window.onload = two;

然而当运行代码后，发现只弹出字符串“two”对话框。

字符串“one”对话框不能被弹出的原因是JavaScript的onload事件一次只能保存在一个函数的引用，它会自动用后面的函数覆盖前面的函数，因此不能在现有的行为上添加新的行为。

为了达到两个函数顺序触发的效果，只能在创建一个新的JavaScript方法来实现，JavaScript代码如下：

window.onload = function () {
    one();
    two();
}

虽然这样编写的代码能解决某些问题，但还是不能满足某些需求，例如有多个JavaScript文件，每个文件都需要用到window.onload方法，这种情况下用上面提到的方法编写代码会非常麻烦。你可以参考Javascript共享onload事件，而jQuery的$(document).ready()方法能够很好地处理这些情况，每次调用$(document).ready()方法都会在现有的行为上追加新的行为，这些行为函数会根据注册的顺序依次执行。例如如下jQuery代码：

function one() {
    alert("one");
}
function two() {
    alert("two");
}
$(document).ready(function () {
    one();
});
$(document).ready(function () {
    two();
})

运行代码后，会弹出字符串“one”对话框，然后弹出字符串“two”对话框

接下来介绍一下共享onlode事件：
假设两个函数：firstFunction和secondFunction。如果想让这两个函数都在页面加载时得到执行，该怎么办?如果把它们逐渐绑定到onload事件上，它们当中将只有最后那个才会被实际执行：
window.onload = firstFunction;
window.onload = secondFunction;
secondFunction 将取代firstFunction。你可能会想：每个事件处理函数只能绑定一条指令。
有一种办法可以避免这一难题：可以先创建一个匿名函数来容纳这两个函数，然后把那个匿名函数绑定到onload事件上，如下所示：
window.onload = function () {
　firstFunction();
　secondFunction();
}
他确实能很好的工作——在需要绑定的函数不是很多的时候，这应该是最简单的解决方案了。
这里还有一个弹性最佳的解决方案——不管你打算在页面加载完毕时执行多少个函数，他都可以应付自如。
把现有的window.onload事件处理函数的值存入变量oldonload。
如果在这个处理函数上还没有绑定任何函数，就像平时那样把新函数添加给它。
如果在这个处理函数上已绑定了一些函数，就把新函数追加到现有指令的末尾。
//核心代码开始
function addOnloadEvent (func) {
  var oldfunc = window.onload;
  if(typeof oldfunc != 'function'){
    window.onload = func;
  }else{
    window.onload = function(){
      oldfunc();
      func();
    }
  }
}
//核心代码结束
例子：
function a(){
  console.log(1);
}
function b(){
  console.log(2);
}
function c(){
  console.log(3);
}
addOnloadEvent(a);
addOnloadEvent(b);
addOnloadEvent(c);
这将把那些在页面加载完毕时执行的函数创建为一个队列。如果想把刚才那两个函数添加到队列里去，只需要写出以下代码就行了：
addLoadEvent(firstFunction);
addLoadEvent(secondFunction);
这个函数非常实用，尤其是在代码量变得越来越复杂的时候。无论打算在页面加载完毕时执行多少个函数，只要多写一条语句就就可以安排好一切。
