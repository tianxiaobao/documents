一、使用!!操作符转换布尔值
只要变量为0，null，""，undefined或者NaN都将返回false，反之返回true。

二、使用+将字符串转换为数字
只适用于字符串数据，否则返回NaN。
function toNumber(strNumber){
  return +strNumber;
}
console.log(toNumber("1234"));//1234
console.log(toNumber("ABC"));//NaN
这个也适用于Date，在本例中，它将返回的是时间戳数字：
console.log(+new Date()) // 1461288164385

三、并条件符
如果你有一段这样的代码：
if (conected) {
    login();
}
你也可以将变量简写，并且使用&&和函数连接在一起，比如上面的示例，可以简写成这样：
conected && login();
如果一些属性或函数存在于一个对象中，你也可以这样做检测，如下面的代码所示：
user && user.login();

四、使用||运算符
使用||操作符，将默认值当做第二个参数传入，如果第一个参数返回的值为false，那么第二个值将会认为是一个默认值。
function User(name, age) {
    this.name = name || "Oliver Queen";
    this.age = age || 27;
}

五、在循环中缓存array.length
在处理一个很大的数组循环时，对性能影响将是非常大的，为了避免这种现象出现，可以将array.length做一个缓存：
for(var i = 0, length = array.length; i < length; i++) {
    console.log(array[i]);
}

六、检测对象中属性
当你需要检测一些属性是否存在，避免运行未定义的函数或属性时，这个小技巧就显得很有用。
例如，你想使用document.querySelector()来选择一个id，并且让它能兼容IE6浏览器，但是在IE6浏览器中这个函数是不存在的，
那么使用这个操作符来检测这个函数是否存在就显得非常的有用，如下面的示例：
if ('querySelector' in document) {
    document.querySelector("#id");
} else {
    document.getElementById("id");
}

七、获取数组中最后一个元素
设置一个负值作为begin值
var array = [1,2,3,4,5,6];
console.log(array.slice(-1)); // [6]

八、数组截断
删除数组中的元素，例如一个数组有十个元素，我想要前五个
var array = [1,2,3,4,5,6];
console.log(array.length); // 6
array.length = 3;
console.log(array.length); // 3
console.log(array); // [1,2,3]

九、替换所有
String.replace()函数允许你使用字符串或正则表达式来替换字符串，本身这个函数只替换第一次出现的字符串，
不过你可以使用正则表达多中的/g来模拟replaceAll()函数功能：
var string = "john john";
console.log(string.replace(/hn/, "ana")); // "joana john"
console.log(string.replace(/hn/g, "ana")); // "joana joana"

十、合并数组
如果你要合并两个数组，一般情况之下你都会使用Array.concat()函数：
var array1 = [1,2,3];
var array2 = [4,5,6];
console.log(array1.concat(array2)); // [1,2,3,4,5,6];
然后这个函数并不适合用来合并两个大型的数组，因为其将消耗大量的内存来存储新创建的数组。
在这种情况之个，可以使用Array.pus().apply(arr1,arr2)来替代创建一个新数组。这种方法不是用来创建一个新的数组，
其只是将第一个第二个数组合并在一起，同时减少内存的使用：
var array1 = [1,2,3];
var array2 = [4,5,6];
console.log(array1.push.apply(array1, array2)); // [1,2,3,4,5,6];

十一、将NodeList转换成数组
如果你运行document.querySelectorAll(“p”)函数时，它可能返回DOM元素的数组，也就是NodeList对象。
但这个对象不具有数组的函数功能，比如sort()、reduce()、map()、filter()等。为了让这些原生的数组函数功能也能用于其上面，
需要将节点列表转换成数组。可以使用[].slice.call(elements)来实现：
var elements = document.querySelectorAll("p"); // NodeList
var arrayElements = [].slice.call(elements); // Now the NodeList is an array
var arrayElements = Array.from(elements); // This is another way of converting NodeList to Array

十二、sleep方法
function sleep (time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}
// 用法
sleep(500).then(() => {
    alert(1);// 这里写sleep之后需要去做的事情
})
